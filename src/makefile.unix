# Copyright (c) 2009-2010 Satoshi Nakamoto
# Distributed under the MIT/X11 software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

LINK:=$(CXX)
ARCH:=$(system lscpu | head -n 1 | awk '{print $2}')

DEFS=-DBOOST_SPIRIT_THREADSAFE
DEFS += -DBOOST_BIND_GLOBAL_PLACEHOLDERS

DEFS += $(addprefix -I,$(CURDIR) $(CURDIR)/obj $(BOOST_INCLUDE_PATH) $(BDB_INCLUDE_PATH) $(OPENSSL_INCLUDE_PATH))
LIBS = $(addprefix -L,$(BOOST_LIB_PATH) $(BDB_LIB_PATH) $(OPENSSL_LIB_PATH) libethereum libethcore) 

LMODE = dynamic
LMODE2 = dynamic
ifdef STATIC
	LMODE = static
	ifeq (${STATIC}, all)
		LMODE2 = static
	endif
endif

# for boost 1.37, add -mt to the boost libraries
LIBS += \
 -Wl,-B$(LMODE) \
   -l boost_iostreams$(BOOST_LIB_SUFFIX) \
   -l boost_system$(BOOST_LIB_SUFFIX) \
   -l boost_filesystem$(BOOST_LIB_SUFFIX) \
   -l boost_program_options$(BOOST_LIB_SUFFIX) \
   -l boost_serialization$(BOOST_LIB_SUFFIX) \
   -l boost_thread$(BOOST_LIB_SUFFIX) \
   -l boost_chrono$(BOOST_LIB_SUFFIX) \
   -l db_cxx$(BDB_LIB_SUFFIX) \
   -l ssl \
   -l crypto

LIBS+= \
 -Wl,-B$(LMODE2) \
   -l z \
   -l dl \
   -l pthread


# Hardening
# Make some classes of vulnerabilities unexploitable in case one is discovered.
#
    # This is a workaround for Ubuntu bug #691722, the default -fstack-protector causes
    # -fstack-protector-all to be ignored unless -fno-stack-protector is used first.
    # see: https://bugs.launchpad.net/ubuntu/+source/gcc-4.5/+bug/691722
    HARDENING=-fno-stack-protector

    # Stack Canaries
    # Put numbers at the beginning of each stack frame and check that they are the same.
    # If a stack buffer if overflowed, it writes over the canary number and then on return
    # when that number is checked, it won't be the same and the program will exit with
    # a "Stack smashing detected" error instead of being exploited.
    HARDENING+=-fstack-protector-all -Wstack-protector

    # Make some important things such as the global offset table read only as soon as
    # the dynamic linker is finished building it. This will prevent overwriting of addresses
    # which would later be jumped to.
    LDHARDENING+=-Wl,-z,relro -Wl,-z,now

    # Build position independent code to take advantage of Address Space Layout Randomization
    # offered by some kernels.
    # see doc/build-unix.txt for more information.
    ifdef PIE
        HARDENING+=-fPIE
        LDHARDENING+=-pie
    endif

    # -D_FORTIFY_SOURCE=2 does some checking for potentially exploitable code patterns in
    # the source such overflowing a statically defined buffer.
    #HARDENING+=-D_FORTIFY_SOURCE=2
#


DEBUGFLAGS=-g


ifeq (${ARCH}, i686)
    EXT_OPTIONS=-msse2
endif

    EXT_OPTIONS=-std=c++17
# CXXFLAGS can be specified on the make command line, so we use xCXXFLAGS that only
# adds some defaults in front. Unfortunately, CXXFLAGS=... $(CXXFLAGS) does not work.
ifeq ($(OPTIMIZE), yes)
    HARDENING+=-D_FORTIFY_SOURCE=2
xCXXFLAGS=-O03 $(EXT_OPTIONS) -pthread -Wall -Wextra -Wno-ignored-qualifiers -Wformat -Wformat-security -Wno-unused-parameter \
    $(DEFS) $(HARDENING) $(CXXFLAGS)
else ifeq ($(PROFILE),yes)
xCXXFLAGS=-pg -fno-pie -fPIC $(EXT_OPTIONS) -pthread -Wall -Wextra -Wno-ignored-qualifiers -Wformat -Wformat-security -Wno-unused-parameter \
    $(DEBUGFLAGS) $(DEFS) $(HARDENING) $(CXXFLAGS)
else
xCXXFLAGS=-ggdb $(EXT_OPTIONS) -pthread -Wall -Wextra -Wno-ignored-qualifiers -Wformat -Wformat-security -Wno-unused-parameter \
    $(DEBUGFLAGS) $(DEFS) $(HARDENING) $(CXXFLAGS)
endif

# LDFLAGS can be specified on the make command line, so we use xLDFLAGS that only
# adds some defaults in front. Unfortunately, LDFLAGS=... $(LDFLAGS) does not work.
xLDFLAGS=$(LDHARDENING) $(LDFLAGS)
OBJS= \
    obj/Alert.o \
    obj/Version.o \
    obj/CheckPoints.o \
    obj/NetBase.o \
    obj/AddrMan.o \
    obj/crypto/Key.o \
    obj/main/main.o \
    obj/KeyStore.o \
    obj/View.o \
    obj/Miner.o \
    obj/ConfigurationState.o \
    obj/ccoin/Block.o \
    obj/ccoin/Transaction.o \
    obj/ccoin/Client.o \
    obj/ccoin/Process.o \
    obj/BlockIndex.o \
    obj/NetworkNode.o \
    obj/TxMemPool.o \
    obj/Net.o \
    obj/Protocol.o \
    obj/rpc/Client.o \
    obj/rpc/UtilProto.o \
    obj/rpc/JsonReq.o \
    obj/rpc/Mining.o \
    obj/rpc/BlockChain.o \
    obj/rpc/RawTransaction.o \
    obj/Script.o \
    obj/Sync.o \
    obj/core/Util.o \
    obj/wallet/Wallet.o \
    obj/wallet/WalletTransaction.o \
    obj/wallet/WalletDB.o \
    obj/wallet/APITransaction.o \
    obj/wallet/Crypter.o \
    obj/wallet/DB.o \
    obj/validation/engine/ValidationEngine.o \
    obj/validation/smc/SMCValidator.o \
    obj/validation/smc/SMCTrap.o \
    obj/State.o \
    obj/Twister.o \
    obj/Tor.o \
    obj/dions/Dions.o \
    obj/reflect/Base.o \
    obj/NoUI.o \
    obj/crypto/x11/cubehash.o \
    obj/crypto/x11/luffa.o \
    obj/crypto/x11/aes_helper.o \
    obj/crypto/x11/echo.o \
    obj/crypto/x11/shavite.o \
    obj/crypto/x11/simd.o \
    obj/crypto/x11/blake.o\
    obj/crypto/x11/bmw.o\
    obj/crypto/x11/groestl.o\
    obj/crypto/x11/jh.o\
    obj/crypto/x11/keccak.o\
    obj/crypto/x11/skein.o \
    obj/Kernel.o 

all: iocoind

LIBS += $(CURDIR)/leveldb/libleveldb.a $(CURDIR)/leveldb/libmemenv.a
LIBS += $(CURDIR)/ptrie/libdevcore.a 
DEFS += $(addprefix -I,$(CURDIR)/leveldb/include)
DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers)
DEFS += $(addprefix -I,$(CURDIR)/ptrie)
OBJS += obj/TxDBLevelDB.o
leveldb/libleveldb.a:
	@echo "Building LevelDB ..."; cd leveldb; make libleveldb.a libmemenv.a; cd ..;
obj/txdb-leveldb.o: leveldb/libleveldb.a
ptrie/libdevcore.a:
	@echo "Building libdevcore ..."; cd ptrie; cmake CMakeLists.txt; make ; cd ..;

LIBS += $(CURDIR)/dvm/lib/libdvmone.a
LIBS += $(CURDIR)/dvm/ethash/lib/ethash/libethash.a
LIBS += $(CURDIR)/dvm/ethash/lib/keccak/libkeccak.a
LIBS += $(CURDIR)/dvm/dvmc/lib/hex/libhex.a
LIBS += $(CURDIR)/dvm/dvmc/lib/instructions/libdvmc-instructions.a
DEFS += $(addprefix -I,$(CURDIR)/dvm/ethash/include)
DEFS += $(addprefix -I,$(CURDIR)/dvmone/include)
DEFS += $(addprefix -I,$(CURDIR)/dvmone/dvmc/include)
DEFS += $(addprefix -I,$(CURDIR)/dvm/include)
DEFS += $(addprefix -I,$(CURDIR)/dvm/dvmc/include)
DEFS += $(addprefix -I,$(CURDIR)/evmc/include)
dvm/ethash/lib/ethash/libethash.a:
	@echo "Building DVM ..."; cd dvm/ethash; cmake CMakeLists.txt; make; cd ..;
dvm/lib/libdvmone.a:
	@echo "Building DVM ..."; cd dvm; cmake CMakeLists.txt; make; cd ethash; cmake CMakeLists.txt; make; cd ..;
iocoind: dvm/lib/libdvmone.a dvm/ethash/lib/ethash/libethash.a ptrie/libdevcore.a

# auto-generated dependencies:
-include obj/*.P

obj/build.h: FORCE
	/bin/sh ../share/genbuild.sh obj/build.h
Version.cpp: obj/build.h
DEFS += -DHAVE_BUILD_INFO

obj/%.o: %.cpp
	$(CXX) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

obj/%.o: %.c
	$(CC) -c $(filter-out -std=c++17,$(xCXXFLAGS)) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

iocoind: $(OBJS:obj/%=obj/%)
	$(LINK) $(xCXXFLAGS) -o $@ $^ $(xLDFLAGS) $(LIBS)

clean:
	-rm -f iocoind
	-cd dvm; make clean; rm -f CMakeCache.txt
	-cd ptrie; make clean; rm -f CMakeCache.txt;
	-cd dvm/ethash; make clean; rm -f CMakeCache.txt
	-rm -f obj/*.o
	-rm -f obj/*.P
	-rm -f obj/rpc/*.o
	-rm -f obj/rpc/*.P
	-rm -f obj/main/*.o
	-rm -f obj/main/*.P
	-rm -f obj/wallet/*.o
	-rm -f obj/wallet/*.P
	-rm -f obj/crypto/x11/*.o
	-rm -f obj/crypto/x11/*.P
	-rm -f obj/crypto/*.o
	-rm -f obj/crypto/*.P
	-rm -f obj/ccoin/*.o
	-rm -f obj/ccoin/*.P
	-rm -f obj/core/*.o
	-rm -f obj/core/*.P
	-rm -f obj/validation/smc/*.P
	-rm -f obj/validation/smc/*.o
	-rm -f obj/validation/engine/*.P
	-rm -f obj/validation/engine/*.o
	-rm -f obj/dions/*.o
	-rm -f obj/dions/*.P
	-rm -f obj/reflect/*.o
	-rm -f obj/reflect/*.P
	-rm -f obj/build.h

FORCE:
