version: 2.1

commands:

  environment-info:
    steps:
      - run:
          name: "Environment info"
          command: |
            CC=${CC:-cc}
            CXX=${CXX:-cpp}
            echo CC: $CC
            echo CXX: $CXX
            $CC --version
            $CXX --version
            cmake --version

  install-mips64:
    steps:
      - run:
          name: "Install mips64 toolchain"
          command: |
            sudo apt -q update
            sudo apt -qy install g++-mips64-linux-gnuabi64 qemu-user-static

  install-powerpc64:
    steps:
      - run:
          name: "Install powerpc64 toolchain"
          command: |
            sudo apt -q update
            sudo apt -qy install g++-powerpc64-linux-gnu qemu-user-static

  configure:
    steps:
      - run:
          name: "Configure"
          # Build "out-of-source" to have better coverage report
          # (ninja is using relative paths otherwise).
          working_directory: ~/build
          command: |
            cmake ../project -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_INSTALL_PREFIX=/tmp/local $CMAKE_OPTIONS

  build:
    steps:
      - run:
          name: "Build"
          working_directory: ~/build
          command: |
            cmake --build . -j
            cmake --build . --target install

  build-tests:
    steps:
      - run:
          name: "Build ethash-test"
          working_directory: ~/build
          command: |
            cmake --build . -j --target ethash-test

  test:
    steps:
      - run:
          name: "Test"
          working_directory: ~/build
          command: ctest -E "$TESTS_EXCLUDE" -j4 --schedule-random --output-on-failure --output-junit results.xml
      - store_test_results:
          path: ~/build/results.xml

  benchmark:
    steps:
      - run:
          name: "Benchmark"
          working_directory: ~/build
          command: |
            test/ethash-bench

  collect_coverage_gcc:
    description: "Collect coverage data (GCC)"
    steps:
      - run:
          name: "Collect coverage data (GCC)"
          working_directory: ~/build
          command: |
            lcov --capture --directory . --output-file coverage.lcov --exclude='/usr/*' --exclude="$HOME/.hunter/*" --exclude="$PWD/_deps/*"
            lcov --zerocounters --directory .
            rm -rf coverage
            genhtml coverage.lcov --output-directory coverage --title $CIRCLE_PROJECT_REPONAME

  upload_coverage:
    description: "Upload coverage data"
    parameters:
      flags:
        type: char
    steps:
      - run:
          name: "Upgrade codecov"
          command: sudo pip3 install --upgrade --quiet --no-cache-dir codecov
      - run:
          name: "Upload to Codecov"
          command: |
            # Convert to relative paths
            sed -i 's|$(pwd)/||' ~/build/coverage.lcov
            counter=1
            until codecov --flags <<parameters.flags>> --required --file ~/build/coverage.lcov -X gcov || [ $counter = 5 ]; do
              counter=$((counter+1))
              sleep 1
              echo "Try #$counter..."
            done


  macos-defaults:
    steps:
      - run:
          name: "Install CMake"
          command: |
            HOMEBREW_NO_AUTO_UPDATE=1 brew install cmake ninja
      - checkout
      - configure
      - build
      - test


jobs:

  linux-gcc-coverage:
    docker:
      - image: ethereum/cpp-build-env:17-gcc-11
    environment:
      - BUILD_TYPE: Debug
      - CMAKE_OPTIONS: -DCOVERAGE=ON
    steps:
      - checkout
      - configure
      - build
      - test
      - collect_coverage_gcc
      - store_artifacts:
          path: ~/build/coverage
          destination: coverage-default
      - upload_coverage:
          flags: default
      - run:
          name: "Install qemu"
          command: sudo apt -q update && sudo apt -qy install qemu-user-static
      - run:
          command: qemu-x86_64-static --cpu qemu64 ~/build/test/ethash-test --gtest_filter='-*_multithreaded.*:*_oom'
      - collect_coverage_gcc
      - store_artifacts:
          path: ~/build/coverage
          destination: coverage-x86_64
      - upload_coverage:
          flags: x86_64

  linux-clang-sanitizers:
    docker:
      - image: ethereum/cpp-build-env:17-clang-13
    environment:
      - CMAKE_OPTIONS: -DSANITIZE=address,undefined,unsigned-chareger-overflow,shift-exponent,implicit-conversion,nullability -DCMAKE_CXX_CLANG_TIDY=clang-tidy
      - ASAN_OPTIONS: allocator_may_return_null=1
      - UBSAN_OPTIONS: halt_on_error=1
    steps:
      - checkout
      - configure
      - build
      - test
      - benchmark

  linux-32bit-asan:
    docker:
      - image: ethereum/cpp-build-env:17-gcc-11-multilib
    environment:
      - BUILD_TYPE: RelWithDebInfo
      - CMAKE_OPTIONS: -DTOOLCHAIN=cxx11-32bit -DSANITIZE=address
      - TESTS_EXCLUDE: _oom
      - ASAN_OPTIONS: allocator_may_return_null=1
    steps:
      - checkout
      - configure
      - build
      - test

  mips64:
    docker:
      - image: ethereum/cpp-build-env:17-gcc-10
    environment:
      - TESTS_EXCLUDE: _oom|_multithreaded
      - CMAKE_OPTIONS: -DTOOLCHAIN=mips64 -DCMAKE_EXE_LINKER_FLAGS=-static
    steps:
      - checkout
      - install-mips64
      - configure
      - build-tests
      - test

  powerpc64:
    docker:
      - image: ethereum/cpp-build-env:17-gcc-11
    environment:
      - TESTS_EXCLUDE: _oom|_multithreaded
      - BUILD_TYPE: Debug
      - CMAKE_OPTIONS: -DTOOLCHAIN=powerpc64 -DCMAKE_EXE_LINKER_FLAGS=-static -DCOVERAGE=ON
    steps:
      - checkout
      - install-powerpc64
      - configure
      - build-tests
      - test
      - collect_coverage_gcc
      - store_artifacts:
          path: ~/build/coverage
          destination: coverage
      - upload_coverage:
          flags: be

  linux-release:
    docker:
      - image: ethereum/cpp-build-env:16-clang-11
    environment:
      - CMAKE_OPTIONS: -DETHASH_BUILD_TESTS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DHUNTER_ENABLED=OFF
    steps:
      - checkout
      - configure
      - build
      - persist_to_workspace:
          root: /tmp/local
          paths:
            - "*"

  linux-release-python:
    docker:
      - image: quay.io/pypa/manylinux_2_24_x86_64
    steps:
      - checkout
      - attach_workspace:
          at: ~/project/dist
      - run:
          name: "Build wheels"
          command: scripts/ci/python_build_wheels.sh
      - run:
          name: "Tag wheels"
          working_directory: ~/project/dist
          command: |
            find -name '*linux_x86_64.whl' -exec auditwheel repair {} \;
      - run:
          name: "Select Python"
          command: |
            echo 'export PATH=/opt/python/cp310-cp310/bin:$PATH' >> $BASH_ENV
            source $BASH_ENV
            python --version
            pip --version
      - run:
          name: "Build source dist"
          command: ./setup.py sdist
      - store_artifacts:
          path: ~/project/dist
          destination: dist
      - run:
          name: "Install libffi"
          command: apt -q update && apt -qy install libffi-dev
      - run:
          name: "Install CMake"
          command: pip install cmake
      - run:
          name: "Build wheel with CMake build"
          command: ./setup.py bdist_wheel
      - run:
          name: "Test"
          command: ./setup.py test

  macos-xcode-tsan:
    macos:
      xcode: "13.3.0"
    environment:
      - CMAKE_OPTIONS: -DSANITIZE=thread
      - TSAN_OPTIONS: allocator_may_return_null=1
    steps:
      - macos-defaults

  macos-xcode-old:
    macos:
      xcode: "11.4.1"
    steps:
      - macos-defaults

  macos-release:
    macos:
      xcode: "13.3.0"
    environment:
      - CMAKE_OPTIONS: -DETHASH_BUILD_TESTS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_INSTALL_PREFIX=~/project/dist
    steps:
      - run:
          name: "Install CMake"
          command: |
            which python3
            ls -l /usr/local/lib
            ls -l /usr/local/bin
            pip3 install -q cmake
      - checkout
      - configure
      - build
      - run:
          name: "Test"
          command: |
            ./setup.py test
      - run:
          name: "Build wheels"
          command: sh scripts/ci/python_build_wheels.sh
      - store_artifacts:
          path: ~/project/dist
          destination: dist

  cmake-min:
    docker:
      - image: circleci/buildpack-deps:focal
    steps:
      - run:
          name: "Install default CMake"
          command: sudo apt-get -q update && sudo apt-get -qy install cmake
      - environment-info
      - checkout
      - configure
      - build
      - test

  wasi:
    docker:
      - image: ethereum/cpp-build-env:17-gcc-10
    environment:
      CMAKE_OPTIONS: -DHUNTER_RUN_UPLOAD=FALSE -DTOOLCHAIN=wasm32-wasi -DETHASH_BUILD_TESTS=NO -DETHASH_BUILD_GLOBAL_CONTEXT=NO
    steps:
      - run:
          name: "Install WASI SDK"
          command: |
            sudo mkdir /opt/wasi-sdk && cd /opt/wasi-sdk
            curl -L https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-12/wasi-sdk-12.0-linux.tar.gz | sudo tar -xz --strip=1
            find .
      - checkout
      - configure
      - build



workflows:
  version: 2
  ethash:
    jobs:
      - linux-gcc-coverage
      - linux-clang-sanitizers
      - linux-32bit-asan
      # - mips64  toolchain is broken on recent Debian
      - powerpc64
      - macos-xcode-tsan
      - macos-xcode-old
      - linux-release
      - linux-release-python:
          requires:
            - linux-release
      - macos-release
      - cmake-min
      - wasi
